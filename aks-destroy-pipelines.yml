# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

variables:
- name: DEV_ENVIRONMENT
  value: dev
- name: QA_ENVIRONMENT
  value: qa

pool:
  vmImage: ubuntu-latest

stages:
  - stage: DestroyAksCluster
    displayName: Destroy Aks Cluster Stage
    jobs:
      - deployment: DestroyAksClusterJob
        displayName: Destroy Aks Cluster Job
        environment: $(DEV_ENVIRONMENT)
        strategy:
         runOnce:
           deploy:
              steps:
              - checkout: self
                displayName: Checkout code
              - task: TerraformInstaller@0
                displayName: Install Terraform
                inputs:
                  terraformVersion: '1.1.6'
              - task: TerraformCLI@0
                displayName: Terraform Init
                inputs:
                  command: 'init'
                  workingDirectory: $(System.DefaultWorkingDirectory)/terraform-manifests
                  backendType: 'azurerm'
                  backendServiceArm: 'terraform-aks-azurerm-svc-con'
                  backendAzureRmResourceGroupName: 'terraform-storage-rg'
                  backendAzureRmStorageAccountName: 'biktfstatesstorage'
                  backendAzureRmContainerName: 'tfstatesfile'
                  backendAzureRmKey: 'aks-$(DEV_ENVIRONMENT).terraform.tfstate'                  
                  allowTelemetryCollection: false                  
              - task: TerraformCLI@0
                displayName: Terraform Destroy
                inputs:
                  command: 'destroy'
                  workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
                  environmentServiceName: 'terraform-aks-azurerm-svc-con'
                  commandOptions: '-var environment=$(DEV_ENVIRONMENT)'
                  allowTelemetryCollection: false
