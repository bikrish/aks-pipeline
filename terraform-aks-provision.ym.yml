# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

variables:
- name: DEV_ENVIRONMENT
  value: dev
- name: QA_ENVIRONMENT
  value: qa


pool:
  vmImage: ubuntu-latest

stages:
- stage: TerraformValidate
  displayName: Terraform Validate Stage
  jobs:
  - job: TerraformValidateJob
    displayName: Terraform Validate Job
    continueOnError: false
    steps:
    - task: PublishPipelineArtifact@1
      displayName: Publish Terraform Manifests
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
        artifact: 'terraform-out'
        publishLocation: 'pipeline'
    - task: TerraformInstaller@0
      displayName: Install Terraform
      inputs:
        terraformVersion: '1.1.6'
    - task: TerraformCLI@0
      displayName: Terraform Init
      inputs:
        command: 'init'
        backendType: 'azurerm'
        backendServiceArm: 'terraform-aks-azurerm-svc-con'
        backendAzureRmResourceGroupName: 'terraform-storage-rg'
        backendAzureRmStorageAccountName: 'biktfstatesstorage'
        backendAzureRmContainerName: 'tfstatesfile'
        backendAzureRmKey: 'base.terraform.tfstate'
        allowTelemetryCollection: false
    - task: TerraformCLI@0
      displayName: Terraform Validate
      inputs:
        command: 'validate'
        allowTelemetryCollection: false
    
- stage: 
  displayName: Aks Deployment Stage
  jobs:
    - deployment: DeployDevAksCluster
      displayName: Deploy Aks In Dev
      environment: $(DEV_ENVIRONMENT)
      strategy:
       runOnce:
        deploy:
          steps:
          - task: DownloadSecureFile@1
            displayName: Download SSH Key
            name: sshkey
            inputs:                          
              secureFile: 'aksprodsshkey.pub'
          - task: TerraformInstaller@0
            displayName: Install Terraform
            inputs:
              terraformVersion: '1.1.6'
          - task: TerraformCLI@0
            displayName: Terraform Init
            continueOnError: false
            inputs:
              command: 'init'
              workingDirectory: '$(Pipeline.Workspace)/terraform-out'
              backendType: 'azurerm'
              backendServiceArm: 'terraform-aks-azurerm-svc-con'
              backendAzureRmResourceGroupName: 'terraform-storage-rg'
              backendAzureRmStorageAccountName: 'biktfstatesstorage'
              backendAzureRmContainerName: 'tfstatesfile'
              backendAzureRmKey: 'aks-$(DEV_ENVIRONMENT).terraform.tfstate'
              allowTelemetryCollection: false
          - task: TerraformCLI@0
            displayName: Terraform Plan
            continueOnError: false
            inputs:
              command: 'plan'
              workingDirectory: '$(Pipeline.Workspace)/terraform-out'
              commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEV_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
              environmentServiceName: 'terraform-aks-azurerm-svc-con'
              allowTelemetryCollection: false
          - task: TerraformCLI@0
            inputs:
              command: 'apply'
              workingDirectory: '$(Pipeline.Workspace)/terraform-out'
              environmentServiceName: 'terraform-aks-azurerm-svc-con'
              commandOptions: '$(Pipeline.Workspace)/terraform-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
              allowTelemetryCollection: false

          
          
          
          
            
        
